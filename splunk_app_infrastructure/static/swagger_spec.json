{
  "swagger": "2.0",
  "info": {
    "title": "Splunk App for Infrastructure API Guide",
    "description": "This is Splunk App for Infrastructure (SAI) API documentation page.",
    "version": "1.2.3",
    "termsOfService": "https://www.splunk.com/en_us/legal/terms/terms-of-use.html"
  },
  "basePath": "/en-US/splunkd/__raw/servicesNS/nobody/splunk_app_infrastructure/infra_interface",
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Entity",
      "description": "A type of basic object in SAI. Entity endpoints handle basic entity CRUD operations"
    },
    {
      "name": "Group",
      "description": "A type of basic object in SAI. Group endpoints handle basic group CRUD operations"
    },
    {
      "name": "Alert",
      "description": "Alert indicates alert definitions. Alert endpoints handle CRUD operations on alert definitions stored internally as savedsearches"
    },
    {
      "name": "AWS",
      "description": "AWS utility endpoint to check any AWS related information like app execution environment"
    },
    {
      "name": "VictorOps",
      "description": "A type of basic object in SAI. VictorOps endpoints handle basic victorops related operations"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/entity/data": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List all saved entities",
        "description": "Return a list of all saved entities",
        "operationId": "getEntity",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "description": "query parameters",
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "description": "number of entities to return",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "number of entities to skip, used in the context of pagination requests",
            "type": "integer"
          },
          {
            "name": "sort_key",
            "in": "query",
            "description": "sort entities based on key",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "sort entities based on order",
            "required": true,
            "type": "string"
          },
          {
            "name": "display_name_locale",
            "in": "query",
            "required": false,
            "description": "display the locale for entity",
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "description": "return entities with fields values",
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Entity"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Create a new entity",
        "description": "Create a new entity.",
        "operationId": "addEntity",
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "ID of the new entity",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "title",
            "description": "Title of the new entity",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "state",
            "description": "State of the new entity. Value can only be either active or inactive",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "informational_dimensions",
            "type": "string",
            "description": "Informational dimensions of the new entity",
            "required": true
          },
          {
            "in": "formData",
            "name": "identifier_dimensions",
            "type": "string",
            "description": "Identifier dimensions of the new entity",
            "required": true
          },
          {
            "in": "formData",
            "name": "dimensions",
            "type": "string",
            "description": "All dimensions of the new entity",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "_key": {
                  "type": "string",
                  "description": "The unique id of the created entity",
                  "example": "9ffcfde4bbl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/entity/data/{entityId}": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "Get a single entity by ID",
        "description": "Return information of a single entity",
        "operationId": "getEntityByID",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "ID of entity to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "description": "query parameters",
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "400": {
            "description": "Bad Request. Entity may not exist, or query parameter is in invalid format"
          }
        }
      },
      "post": {
        "tags": [
          "Entity"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Update a single entity by name (ID)",
        "description": "Update an existing entity",
        "operationId": "updateEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "ID of entity that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "title",
            "description": "Title of the new entity",
            "required": true
          },
          {
            "in": "formData",
            "name": "state",
            "description": "State of the new entity. Value can only be either active or inactive",
            "required": true
          },
          {
            "in": "formData",
            "name": "informational_dimensions",
            "type": "string",
            "description": "Informational dimensions of the new entity",
            "required": true
          },
          {
            "in": "formData",
            "name": "identifier_dimensions",
            "type": "string",
            "description": "Identifier dimensions of the new entity",
            "required": true
          },
          {
            "in": "formData",
            "name": "dimensions",
            "type": "string",
            "description": "All dimensions of the new entity",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "_key": {
                  "type": "string",
                  "description": "The unique id of the created entity",
                  "example": "9ffcfde4bbl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Entity may not exist, or query parameter is in invalid format"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Entity"
        ],
        "summary": "Delete a single entity by name (ID)",
        "description": "Delete a sinlge entity by name (ID)",
        "operationId": "deleteEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "name (ID) of the entity to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Cannot find the entity with id {entityID}"
          }
        }
      }
    },
    "/entity/bulk_delete": {
      "delete": {
        "tags": [
          "Entity"
        ],
        "summary": "Bulk delete entities",
        "description": "Bulk delete entities",
        "operationId": "bulkDeleteEntity",
        "parameters": [
          {
            "name": "delete_query",
            "in": "query",
            "description": "query parameter to filter down to entities to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "query parameters to filter the remaining entities to return",
            "required": true,
            "type": "string"
          },
          {
            "name": "invert_delete",
            "in": "query",
            "description": "provide this parameter if you want to *NOT* delete the list of entities",
            "required": false,
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "provide this parameter to show the no of entities on page",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "number of groups to skip, used in the context of pagination requests",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort_key",
            "in": "query",
            "description": "provide this parameter to sort entities by key",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "provide this parameter to sort by direction",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/entity/metadata": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "Get metadata (that could include total count, health breakdown, etc) of entities",
        "description": "Returns metadata information",
        "operationId": "getEntityMetadata",
        "parameters": [
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "KV store query to match entities",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Map of dimensions and values in metadata",
            "schema": {
              "type": "object",
              "properties": {
                "total_count": {
                  "type": "integer",
                  "example": 300
                }
              }
            }
          }
        }
      }
    },
    "/entity/dimension_summary": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "Get dimension summary of entities",
        "description": "Returns dimension summary of entities",
        "operationId": "getEntityDimensionSummary",
        "parameters": [
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "KV store query to match entities",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Map of dimensions and values in metadata",
            "schema": {
              "type": "object",
              "properties": {
                "dimensions": {
                  "type": "object",
                  "properties": {
                    "entity_type": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Windows_Host"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entity/metric_name": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List metric names by dimensions",
        "description": "Returns an entry with all metric names filtered by dimensions along with their min, max information from the last 24 hours",
        "operationId": "getEntityMetricName",
        "parameters": [
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          },
          {
            "name": "query",
            "in": "query",
            "description": "query parameters",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of metric names filtered by dimensions",
            "schema": {
              "type": "array",
              "items": {
                "example": {
                  "Availability": {
                    "min": "0.00",
                    "max": "1.00"
                  },
                  "AWS/EBS.BurstBalance": {
                    "min": "0.00",
                    "max": "100.00"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/entity/metric_data": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "Return a list of a single metric average value by entity names",
        "description": "Return a list of a single metric average value by entity names",
        "operationId": "getEntityMetricData",
        "parameters": [
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          },
          {
            "name": "query",
            "in": "query",
            "description": "query parameters, \"metric_name\" is a required parameter in query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return a list of a single metric average value by entity names",
            "schema": {
              "type": "array",
              "items": {
                "example": {
                  "metric_data": {
                    "eyJob3N0IjogIm1haW5lLnVzYS5jb20ifQ==": "50.62",
                    "eyJWb2x1bWVJZCI6ICJ2b2wtMDJjNjU0Nzc4ZmI2ZmUyNDgifQ==": "0.19"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/group/data": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List all saved groups",
        "description": "Return a list of all saved groups or filter by entityID",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "KV store query to match groups by name/title",
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "description": "return groups with fields values",
            "type": "string"
          },
          {
            "name": "filter_by_entity_ids",
            "in": "query",
            "required": false,
            "description": "return any group contains this entityID parameter",
            "type": "string"
          },
          {
            "name": "filter_by_entity_names",
            "in": "query",
            "required": false,
            "description": "return any group contains this entity name parameter",
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "description": "number of groups to return",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "number of groups to skip, used in the context of pagination requests",
            "type": "integer"
          },
          {
            "name": "sort_key",
            "in": "query",
            "description": "sort groups based on key",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "sort groups based on order",
            "required": true,
            "type": "string"
          },
          {
            "name": "output_mode",
            "in": "query",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Create a new group",
        "description": "Create a new group.",
        "operationId": "addGroup",
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "Key of the new group",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Name of the new group",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "formData",
            "description": "filter of the new group",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation.",
            "schema": {
              "type": "object",
              "example": {
                "name": "sea-group",
                "title": "Sea Production",
                "filter": "os=ubuntu",
                "workspace_url_path": "/app/splunk_app_infrastructure/metrics_analysis",
                "log_search": "{'filters': [{'type': 'include', 'field': 'sourcetype', 'values': ['*']}, {'type': 'include', 'field': 'host', 'values': ['mars.planets.com', 'jupiter.planets.com', 'alabama.usa.com']}], 'type': 'and'}"
              }
            }
          },
          "400": {
            "description": "Failed to create the group {group_title}."
          },
          "409": {
            "description": "Cannot create a group that already exists"
          }
        }
      }
    },
    "/group/bulk_delete": {
      "delete": {
        "tags": [
          "Group"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Bulk delete groups",
        "description": "Bulk delete groups",
        "operationId": "bulkDeleteGroup",
        "parameters": [
          {
            "name": "delete_query",
            "in": "query",
            "description": "KV Store query to mach the groups to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "KV store query to match groups by name/title",
            "required": true,
            "type": "string"
          },
          {
            "name": "invert_delete",
            "in": "query",
            "description": "delete all groups or not",
            "required": true,
            "type": "number"
          },
          {
            "name": "count",
            "in": "query",
            "description": "number of groups to return",
            "required": true,
            "type": "number"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "number of groups to skip, used in the context of pagination requests",
            "required": true,
            "type": "number"
          },
          {
            "name": "sort_key",
            "in": "query",
            "description": "sort groups based on key",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "sort groups based on order",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "404": {
            "description": "Cannot find the group with id {groupID}!"
          }
        }
      }
    },
    "/group/metadata": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List group metadata",
        "description": "Returns an entry with all unique titles of groups",
        "operationId": "getGroupMetadata",
        "parameters": [
          {
            "name": "output_mode",
            "in": "query",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "KV store query to match groups",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups titles in metadata",
            "schema": {
              "type": "object",
              "example": {
                "groups": "{'titles': ['AAA', 'aba', 'All planets'], 'total_count': 3, alert_groups: ['AAA', 'aba', 'All planets']}"
              }
            }
          }
        }
      }
    },
    "/group/count": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List group count",
        "description": "Returns the count of all filtered groups, if query is an empty filter, count of all groups will be retrieved",
        "operationId": "getGroupsFilteredCount",
        "parameters": [
          {
            "name": "output_mode",
            "in": "query",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "KV store query to match groups",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of retrieved groups",
            "schema": {
              "type": "object",
              "example": {
                "total_count": 3
              }
            }
          }
        }
      }
    },
    "/group/data/{groupID}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get a group by ID",
        "description": "Return a single group",
        "operationId": "getGroupByID",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "ID of group to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "name": "sea-group",
                "title": "Sea Production",
                "filter": "string",
                "workspace_url_path": "/app/splunk_app_infrastructure/metrics_analysis",
                "log_search": "{'filters': [{'type': 'include', 'field': 'sourcetype', 'values': ['*']}, {'type': 'include', 'field': 'host', 'values': ['mars.planets.com', 'jupiter.planets.com', 'alabama.usa.com']}], 'type': 'and'}",
                "entities_in_group": "{{\"torrance.usa.com\": \"eyJob3N0IjogInRvcnJhbmNlLnVzYS5jb20ifQ==\", \"washington.usa.com\": \"eyJob3N0IjogIndhc2hpbmd0b24udXNhLmNvbSJ9\", \"simi.valley.usa.com\": \"eyJob3N0IjogInNpbWkudmFsbGV5LnVzYS5jb20ifQ==\", \"rancho.cucamonga.usa.com\": \"eyJob3N0IjogInJhbmNoby5jdWNhbW9uZ2EudXNhLmNvbSJ9\"}"
              }
            }
          },
          "400": {
            "description": "Group with id {groupID} cannot be found"
          },
          "404": {
            "description": "Group not found"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Update a group by ID",
        "description": "Update an existing group by ID",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "ID of group that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "name of group",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Title of the new group",
            "required": true
          },
          {
            "name": "filter",
            "in": "formData",
            "description": "Filter of the new group",
            "required": false,
            "type": "string"
          },
          {
            "name": "output_mode",
            "in": "query",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "type": "object",
              "example": {
                "name": "AAA",
                "title": "Updated AAA",
                "filter": "os=ubuntu",
                "workspace_url_path": "/app/splunk_app_infrastructure/metrics_analysis",
                "log_search": "{'filters': [{'type': 'include', 'field': 'sourcetype', 'values': ['*']}, {'type': 'include', 'field': 'host', 'values': ['mars.planets.com', 'jupiter.planets.com', 'alabama.usa.com']}], 'type': 'and'}"
              }
            }
          },
          "400": {
            "description": "Failed to update the group {title}"
          },
          "500": {
            "description": "Failed to update the group {groupID}"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group by ID",
        "description": "Delete a group by ID",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Group id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "404": {
            "description": "Cannot delete a group that does not exist"
          }
        }
      }
    },
    "/alert/data": {
      "get": {
        "tags": [
          "Alert"
        ],
        "summary": "List all alert savedsearches",
        "description": "Return a list of all alert savedsearches",
        "operationId": "getAlert",
        "parameters": [
          {
            "in": "query",
            "name": "output_mode",
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertSavedsearch"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Alert"
        ],
        "summary": "Create an alert savedsearch",
        "description": "Return the created savedsearch",
        "operationId": "createAlert",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "alert data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertInputData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AlertSavedsearch"
            }
          },
          "400": {
            "description": "Alert with the specified name already exists"
          }
        }
      }
    },
    "/alert/data/{alertID}": {
      "get": {
        "tags": [
          "Alert"
        ],
        "summary": "Get information about an individual alert savedsearches",
        "description": "Return a list of all alert savedsearches",
        "operationId": "getAlertByID",
        "parameters": [
          {
            "name": "alertID",
            "in": "path",
            "description": "ID of alert to return",
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AlertSavedsearch"
            }
          },
          "404": {
            "description": "Unable to get alert definition with given name"
          }
        }
      },
      "post": {
        "tags": [
          "Alert"
        ],
        "summary": "Update individual alert savedsearches",
        "description": "Return updated alert savedsearches",
        "operationId": "updateAlert",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertID",
            "in": "path",
            "description": "ID of alert to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          },
          {
            "in": "body",
            "name": "alert data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertInputData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AlertSavedsearch"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Alert"
        ],
        "summary": "Delete an individual alert savedsearches",
        "description": "Return a list of remaining alert savedsearches",
        "operationId": "deleteAlert",
        "parameters": [
          {
            "name": "alertID",
            "in": "path",
            "description": "ID of alert to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Cannot delete alert"
          }
        }
      }
    },
    "/aws/check_env": {
      "get": {
        "tags": [
          "AWS"
        ],
        "summary": "Check deployment environment",
        "description": "Returns deployment type, ec2 or non-ec2",
        "operationId": "awsCheckEnv",
        "parameters": [
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "env": "ec2"
              }
            }
          }
        }
      }
    },
    "/victorops/data": {
      "get": {
        "tags": [
          "VictorOps"
        ],
        "summary": "Retrieve all victorops settings",
        "description": "Return all victorops settings",
        "operationId": "retrieveVictorOpsSettings",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "description": "max number of settings to return",
            "type": "number"
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "number of entities to skip, used in pagination-aware requests",
            "type": "number"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "name": "test-victorops",
                "routing_key": "routing123",
                "api_key": "1647520a-77f5-4586-b98b-da786980427f"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "VictorOps"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Create victorops settings",
        "description": "Create a victorops settings",
        "operationId": "createVictorOpsSettings",
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "required": true,
            "description": "name of victorops settings",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "api_key",
            "required": true,
            "description": "api_key for victorops settings",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "routing_key",
            "required": true,
            "description": "routing key for victorops settings",
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "name": {
                "type": "string",
                "example": "test_username"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/victorops/data/{vo_id}": {
      "get": {
        "tags": [
          "VictorOps"
        ],
        "summary": "Retrieve victorops settings",
        "description": "Retrive victorops settings",
        "operationId": "retrieveVictorOpsSettings",
        "parameters": [
          {
            "in": "path",
            "name": "vo_id",
            "required": true,
            "description": "name of victorops settings",
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "name": "test_username",
                "routing_key": "routing123",
                "api_key": "1647520a-77f5-4586-b98b-da786980427f"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "VictorOps"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Update victorops settings",
        "description": "Update victorops settings",
        "operationId": "updateVictorOpsSettings",
        "parameters": [
          {
            "in": "path",
            "name": "vo_id",
            "required": true,
            "description": "name of victorops settings",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "name",
            "required": true,
            "description": "name of victorops settings",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "api_key",
            "required": true,
            "description": "api key of victorops settings",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "routing_key",
            "required": true,
            "description": "routing key of victorops settings",
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "name": "test_username",
                "routing_key": "routing123",
                "api_key": "1647520a-77f5-4586-b98b-da786980427f"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "VictorOps"
        ],
        "summary": "Delete victorops settings",
        "description": "Delete victorops settings",
        "operationId": "deleteVictorOpsSettings",
        "parameters": [
          {
            "in": "path",
            "name": "vo_id",
            "required": true,
            "description": "name of victorops settings",
            "type": "string"
          },
          {
            "in": "query",
            "name": "output_mode",
            "required": true,
            "description": "output format",
            "type": "string",
            "enum": [
              "json"
            ],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Entity": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "_key": {
          "type": "string",
          "example": "eyJJbnN0YW5jZUlkIjogImktMDBhOTUwY2RkMTYyYjdhYzQifQ"
        },
        "title": {
          "type": "string",
          "example": "akron.usa.com"
        },
        "state": {
          "type": "string",
          "example": "active"
        },
        "informational_dimensions": {
          "type": "string",
          "example": "{\"region\": [\"us-east-1\"], \"env\": [\"prod\"]}"
        },
        "identifier_dimensions": {
          "type": "string",
          "example": "{\"host\": [\"akron.usa.com\"]}"
        },
        "vital_metrics": {
          "type": "string",
          "example": "['cpu.system', 'cpu.user']"
        },
        "collectors": {
          "type": "string",
          "example": "[{\"name\": \"os\", \"updated_date\": 1550021846.642787}]"
        },
        "log_search": {
          "type": "string",
          "example": "{'type': 'and', 'filters': [{'type': 'include', 'field': 'sourcetype', 'values': ['*']}, {'type': 'include', 'field': 'host', 'values': ['akron.usa.com']}]}"
        },
        "dimension_display_names": {
          "type": "string",
          "example": "[{\"display_name\": \"OS\", \"dimension_name\": \"os\", \"collector_name\": \"os\"}, {\"display_name\": \"IP Address\", \"dimension_name\": \"ip\", \"collector_name\": \"os\"}, {\"display_name\": \"Version\", \"dimension_name\": \"os_version\", \"collector_name\": \"os\"}]"
        },
        "updated_date": {
          "type": "number",
          "example": 1504152652.55
        },
        "imported_date": {
          "type": "number",
          "example": 1502230274.05
        }
      }
    },
    "Group": {
      "type": "object",
      "required": [
        "name",
        "title",
        "filter"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "sea-group"
        },
        "title": {
          "type": "string",
          "example": "Seattle Production"
        },
        "filter": {
          "type": "string"
        }
      }
    },
    "Collector Configuration": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "test_configuration"
        },
        "title": {
          "type": "string",
          "example": "Test Configuration"
        },
        "source_predicate": {
          "type": "string",
          "example": "cpu.percent.*"
        },
        "title_dimension": {
          "type": "string",
          "example": "host"
        },
        "identifier_dimensions": {
          "type": "string",
          "example": "'*' or ['host', 'ip']"
        },
        "informational_dimensions": {
          "type": "string",
          "example": "'*' or ['cpu_count', 'total_memory']"
        },
        "blacklisted_dimensions": {
          "type": "string",
          "example": "['_punct', 'metric_type']"
        },
        "monitoring_lag": {
          "type": "number",
          "example": 10
        },
        "monitoring_calculation_window": {
          "type": "number",
          "example": 60
        },
        "dimension_display_names": {
          "type": "string",
          "example": "{\"en-us\": {\"os\": \"Operating System\"}, \"en-gb\": {\"os\": \"Operating system, good sir\"}]}"
        },
        "disabled": {
          "type": "number",
          "example": 0
        },
        "vital_metrics": {
          "type": "string",
          "example": "['cpu.system', 'cpu.user']"
        }
      }
    },
    "AlertSavedsearch": {
      "type": "object",
      "required": [
        "name",
        "search",
        "typeId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "server.com-memory.free-avg"
        },
        "typeId": {
          "type": "string",
          "description": "Entity or group ID that alert is for",
          "example": "eyJob3N0IjogInNlcnZlci5jb20ifQ=="
        },
        "search": {
          "type": "string",
          "description": "Saved search SPL",
          "example": "| mstats avg(_value) as \"Avg\" WHERE \"host\"=\"server.com\" AND metric_name=\"memory.free\" AND \"index\"=\"em_metrics\" span=1m| stats list(Avg) as Avg, list(_time) as time | eval past_value=mvindex(Avg, 0), current_value=mvindex(Avg, 1), current_time=mvindex(time, 1)| fields - Avg, time| eval CRITICAL=5, WARNING=3, INFO=1| eval past_state=if(past_value >= -9.00719925474e+15 AND past_value < 77.0, INFO, if(past_value >= 77.0 AND past_value < 108.0, WARNING, if(past_value >= 108.0 AND past_value < 9.00719925474e+15, CRITICAL, \"None\")))| eval current_state=if(current_value >= -9.00719925474e+15 AND current_value < 77.0, INFO, if(current_value >= 77.0 AND current_value < 108.0, WARNING, if(current_value >= 108.0 AND current_value < 9.00719925474e+15, CRITICAL, \"None\")))| eval state_change=if(current_state > past_state, \"degrade\", if(current_state == past_state, \"no\", \"improve\"))| eval metric_name=\"memory.free\",aggregation_method=\"Avg\",managed_by_id=\"eyJob3N0IjogImFsYWJhbWEudXNhLmNvbSJ9\",managed_by_type=\"entity\",split_by=\"None\",threshold_info_min=-9.00719925474e+15,threshold_info_max=77.0,threshold_warning_min=77.0,threshold_warning_max=108.0,threshold_critical_min=108.0,threshold_critical_max=9.00719925474e+15,ss_id=\"alabama.usa.com-memory.free-avg\"| eval entity_id=managed_by_id | join type=inner max=0 entity_id [| inputlookup em_entity_cache | rename _key as entity_id, title as entity_title]| fields - dimensions.*, informational_dimensions"
        },
        "notifications": {
          "type": "array",
          "description": "Notification channels for alerts",
          "items": {
            "type": "object",
            "properties": {
              "via": {
                "type": "string",
                "enum": [
                  "email",
                  "victorops"
                ],
                "example": "email"
              },
              "when": {
                "type": "string",
                "enum": [
                  "improve,degrade",
                  "improve",
                  "degrade"
                ],
                "example": "improve,degrade"
              },
              "to": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Destination for notification, such as target email address",
                  "example": "ops@mycompany.com"
                }
              }
            }
          },
          "example": [
            {
              "via": "email",
              "when": "improve,degrade",
              "to": [
                "ops@mycompany.com",
                "noc@isp.com"
              ]
            },
            {
              "via": "victorops",
              "when": "degrade"
            }
          ]
        }
      }
    },
    "AlertInputData": {
      "type": "object",
      "required": [
        "name",
        "search",
        "typeId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "server.com-memory.free-avg"
        },
        "managed_by_id": {
          "type": "string",
          "description": "Entity or group ID that alert is for",
          "example": "eyJob3N0IjogInNlcnZlci5jb20ifQ=="
        },
        "managed_by_type": {
          "type": "string",
          "enum": [
            "entity",
            "group"
          ],
          "description": "Type of object that manages this alert",
          "example": "entity"
        },
        "metric_spl": {
          "type": "string",
          "description": "Metric SPL",
          "example": "| mstats avg(_value) as \"Avg\" WHERE \"host\"=\"server.com\" AND metric_name=\"memory.free\" AND \"index\"=\"em_metrics\" span=10s"
        },
        "info_min": {
          "type": "number",
          "description": "Min value for info threshold",
          "example": -9007199254740991
        },
        "info_max": {
          "type": "number",
          "description": "Max value for info threshold",
          "example": 77
        },
        "warning_min": {
          "type": "number",
          "description": "Min value for warning threshold",
          "example": 77
        },
        "warning_max": {
          "type": "number",
          "description": "Max value for warning threshold",
          "example": 108
        },
        "critical_min": {
          "type": "number",
          "description": "Min value for critical threshold",
          "example": 108
        },
        "critical_max": {
          "type": "number",
          "description": "Max value for critical threshold",
          "example": 9007199254740991
        },
        "notifications": {
          "type": "array",
          "description": "Notification channels for alerts",
          "items": {
            "type": "object",
            "properties": {
              "via": {
                "type": "string",
                "enum": [
                  "email",
                  "victorops"
                ],
                "example": "email"
              },
              "when": {
                "type": "string",
                "enum": [
                  "improve,degrade",
                  "improve",
                  "degrade"
                ],
                "example": "improve,degrade"
              },
              "to": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Destination for notification, such as target email address",
                  "example": "ops@mycompany.com"
                }
              }
            }
          },
          "example": [
            {
              "via": "email",
              "when": "improve,degrade",
              "to": [
                "ops@mycompany.com",
                "noc@isp.com"
              ]
            },
            {
              "via": "victorops",
              "when": "degrade"
            }
          ]
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Splunk App for Infrastructure",
    "url": "https://docs.splunk.com/Documentation/InfraApp"
  }
}
