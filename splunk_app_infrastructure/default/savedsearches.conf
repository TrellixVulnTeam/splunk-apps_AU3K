[SAI - Entities to retire]
description = Find entities to retire based on the retirement policy of their corresponding entity class
action.em_retire_entities_alert_action = 1
alert_condition = search key=*
cron_schedule = */5 * * * *
enableSched = 1
schedule_priority = highest
counttype = custom
search = | inputlookup em_entity_cache  \
| eval status=if(expiry_time >= now(), "active", "inactive")  \
| search status="inactive"  \
| eval now = now()  \
| join entity_class, status  [ \
    | rest /servicesNS/nobody/splunk_app_infrastructure/configs/conf-entity_classes \
    | fields title, retirement_policy  \
    | spath input=retirement_policy  \
    | rename title as entity_class, {}.duration as duration, {}.status as status, {}.disabled as disabled \
    | fillnull value="false" disabled \
    | search disabled!="true" AND status!="" AND duration!="" \
    | eval cur_time=now() \
    | eval duration=cur_time - relative_time(cur_time,  "-" + duration) \
    | search duration!="" \
    | fields entity_class, duration, status \
] \
| eval should_retire=if(mod_time <= now - duration, 1, 0)  \
| search should_retire=1 \
| rename _key as key \
| fields key, title
disabled = 1


###################################################################################
#                                                                                 #
# ████████╗███████╗██╗     ███████╗███╗   ███╗███████╗████████╗██████╗ ██╗   ██╗  #
# ╚══██╔══╝██╔════╝██║     ██╔════╝████╗ ████║██╔════╝╚══██╔══╝██╔══██╗╚██╗ ██╔╝  #
#    ██║   █████╗  ██║     █████╗  ██╔████╔██║█████╗     ██║   ██████╔╝ ╚████╔╝   #
#    ██║   ██╔══╝  ██║     ██╔══╝  ██║╚██╔╝██║██╔══╝     ██║   ██╔══██╗  ╚██╔╝    #
#    ██║   ███████╗███████╗███████╗██║ ╚═╝ ██║███████╗   ██║   ██║  ██║   ██║     #
#    ╚═╝   ╚══════╝╚══════╝╚══════╝╚═╝     ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝     #
#                                                                                 #
###################################################################################

[OS type telemetry]
search = | inputlookup em_entity_cache \
  | mvexpand dimensions_kv \
  | rex field=dimensions_kv "os=(?<osTypes>.*)" \
  | stats count by osTypes \
  | eval salted_os_type="Infra_Insights" . osTypes, hashed_os_types=sha256(salted_os_type) \
  | rename hashed_os_types as data.osName, count as data.osCount \
  | makejson name data.* output=event
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 1
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.osType
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
enableSched=1
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d

[App Version telemetry]
search = | rest /services/apps/local \
  | search disabled=0 label="Splunk App for Infrastructure" \
  | rename label as data.appName, version as data.appVersion \
  | makejson name data.* output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 1
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.appVersion
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d

[Alert definition telemetry]
search =  | rest /servicesNS/-/-/saved/searches \
  | search eai:acl.app="splunk_app_infrastructure" action.em_write_alerts = 1 \
  | rex field=search "metric_name\=\"(?<metric_name>[^\"]*)" \
  | rex field=search "aggregation_method\=\"(?<aggregation_method>[^\"]*)" \
  | eval salted_alert_title= "Infra_Insights" . title, hashed_alert_title=sha256(salted_alert_title) \
  | rename hashed_alert_title as data.hashedAlertTitle, metric_name as data.alertMetricName, aggregation_method as data.alertAggregationMethod \
  | makejson name data.* output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 1
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.alertDefinitions
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d

[Group definition telemetry]
search = | inputlookup em_groups \
| makemv delim="," filter \
| mvexpand filter \
| rex field=filter "(?<dimension_key>.*)\=(?<dimension_value>.*)" \
| eval salted_dimension_value= "Infra_Insights" . dimension_value, \
  salted_dimension_key= "Infra_Insights" . dimension_key, \
  salted_group_title= "Infra_Insights" . title, \
  hashed_dim_key=sha256(salted_dimension_key), \
  hashed_dim_value=sha256(salted_dimension_value), \
  hashed_group_title=sha256(salted_group_title), \
  filtered=if(in(dimension_key,"ImageId","InstanceId", "os", "os_version", "ip", "host", "VolumeId", "LoadBalancerName"), dimension_key,""), \
  hashed_dim_key=if(filtered != "", filtered, hashed_dim_key) \
| rename hashed_dim_key as data.dimensionKey, hashed_dim_value as data.dimensionValue, hashed_group_title as data.groupTitle \
| stats list(data.*) as data.* by data.groupTitle \
| makejson name data.* output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 1
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.groupDefinitions
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d

[Backend performance telemetry]
search = index="_internal" sourcetype="splunk_app_infrastructure" \
source="*sai_instrument.log" \
| fillnull value=NULL process \
| stats avg(total_time) as "stats.avgSeconds", max(total_time) as "stats.maxSeconds" by method, process \
| makejson output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 1
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.backendPerformance
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 29 * * * *
dispatch.earliest_time = -1h
