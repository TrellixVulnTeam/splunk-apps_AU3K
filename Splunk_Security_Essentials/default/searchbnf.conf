[sseanalytics-command]
syntax = sseanalytics [app=appName] [include_all=false] [include_json=false]
shortdesc = sseanalytics will provide a tabular output for the content shown by Splunk Security Essentials (or any other Essentials app). By default, it will only print key fields, but you can also include the full JSON by adding include_json=true. The command will also automatically enrich with bookmarked status and data availability status. By default it will search Splunk Security Essentials, but you can specify another app with app=<Essentials_App_Name>
description = sseanalytics will provide a tabular output for the content shown by Splunk Security Essentials (or any other Essentials app). By default, it will only print key fields, but you can also include the full JSON by adding include_json=true. The command will also automatically enrich with bookmarked status and data availability status. By default it will search Splunk Security Essentials, but you can specify another app with app=<Essentials_App_Name>
#comment1 = omg I love commments
example1 = | sseanalytics [app=Splunk_Security_Essentials] [include_all=false] [include_json=false] | top mitre
tags = search
usage = public


[mitremap-command]
syntax = mitremap [name=mitre_kill_chain_phase] [pretty=true]
shortdesc = mitremap provides a tabular output of the MITRE ATT&CK and PRE-ATT&CK maps, based on the JSON files that ship with Splunk Security Essentials. By default it runs on ATT&CK, but you can switch with name=preattack. By default it outputs labels, but you can get the IDs if you want by adding pretty=false.
description = mitremap provides a tabular output of the MITRE ATT&CK and PRE-ATT&CK maps, based on the JSON files that ship with Splunk Security Essentials. By default it runs on ATT&CK, but you can switch with name=preattack. By default it outputs labels, but you can get the IDs if you want by adding pretty=false.
#comment1 = omg I love commments
example1 = | mitremap name=(preattack|attack) [pretty=true]
tags = search
usage = public